"""
Solution for the Two Sigma Financial Modeling Challenge: https://www.kaggle.com/c/two-sigma-financial-modeling
Data: https://www.kaggle.com/c/two-sigma-financial-modeling/data
Author: Xiaofei Wen
Email: xiaofeiwen90@gmail.com

kagglegym.py is written to minic the kagglegym api. Source: https://www.kaggle.com/slothouber/kagglegym-emulation/comments/code
So some parameters are pre-calculated to save time as there is a 20-minute limit on Kaggle
"""

SUBMIT = False
import kagglegym
import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import ExtraTreesRegressor

#====setting up parameters for the model====
NUM_LAGS = 1
FEATURES_TO_LAG = ['technical_20','technical_40','technical_22','technical_7']
LOW_Y_CUT = -0.075
HIGH_Y_CUT = 0.075
MAX_DEPTH = 1 # 5 is used for submission
N_EST = 10 # 100 is used for submission
UNV_TOPN = 108
MIS_TOPN = 108
RF_WEIGHT = 0.65
MIS = ['fundamental_5', 'fundamental_38', 'fundamental_6', 'fundamental_1', 'fundamental_61', 'fundamental_28', 'fundamental_26', 'fundamental_57', 'fundamental_24', 'fundamental_9', 'fundamental_22', 'fundamental_49', 'fundamental_3', 'fundamental_31', 'fundamental_51', 'fundamental_47', 'fundamental_34', 'fundamental_35', 'derived_4', 'derived_2', 'fundamental_54', 'fundamental_39', 'fundamental_63', 'fundamental_8', 'fundamental_55', 'fundamental_2', 'fundamental_56', 'fundamental_11', 'fundamental_23', 'fundamental_14', 'fundamental_37', 'fundamental_46', 'fundamental_44', 'fundamental_50', 'fundamental_16', 'fundamental_13', 'fundamental_60', 'fundamental_30', 'fundamental_15', 'fundamental_43', 'fundamental_29', 'fundamental_27', 'fundamental_40', 'technical_28', 'technical_44', 'technical_25', 'technical_31', 'technical_10', 'fundamental_52', 'technical_5', 'derived_3', 'fundamental_58', 'technical_1', 'fundamental_25', 'fundamental_10', 'fundamental_62', 'fundamental_32', 'fundamental_12', 'fundamental_20', 'technical_3', 'fundamental_17', 'derived_1', 'derived_0', 'technical_24', 'technical_29', 'fundamental_19', 'fundamental_21', 'technical_41', 'fundamental_41', 'fundamental_7', 'fundamental_0', 'fundamental_53', 'fundamental_42', 'technical_39', 'technical_18', 'technical_42', 'technical_16', 'technical_38', 'technical_9', 'technical_37', 'technical_12', 'technical_32', 'technical_0', 'fundamental_45', 'fundamental_59', 'fundamental_36', 'fundamental_48', 'fundamental_18', 'technical_33', 'technical_14', 'fundamental_33', 'technical_20', 'technical_30', 'technical_13', 'technical_43', 'technical_11', 'technical_2', 'technical_6', 'technical_17', 'technical_35', 'technical_36', 'technical_27', 'technical_19', 'technical_7', 'technical_40', 'technical_21', 'technical_34', 'technical_22']
UNV = ['technical_20', 'technical_40', 'technical_22', 'technical_7', 'fundamental_18', 'fundamental_53', 'fundamental_54', 'fundamental_21', 'fundamental_43', 'fundamental_57', 'technical_36', 'fundamental_11', 'technical_35', 'fundamental_60', 'fundamental_59', 'fundamental_55', 'technical_14', 'fundamental_28', 'technical_29', 'fundamental_2', 'technical_21', 'technical_10', 'fundamental_37', 'technical_13', 'fundamental_52', 'technical_0', 'fundamental_5', 'fundamental_58', 'fundamental_10', 'fundamental_35', 'fundamental_23', 'technical_27', 'fundamental_40', 'fundamental_50', 'technical_30', 'technical_32', 'technical_9', 'fundamental_62', 'fundamental_3', 'technical_37', 'fundamental_51', 'fundamental_16', 'technical_42', 'fundamental_15', 'technical_43', 'derived_3', 'fundamental_9', 'technical_5', 'fundamental_30', 'technical_24', 'technical_2', 'fundamental_0', 'technical_17', 'technical_28', 'technical_34', 'technical_39', 'technical_3', 'technical_11', 'fundamental_63', 'fundamental_25', 'fundamental_49', 'fundamental_56', 'fundamental_32', 'technical_44', 'fundamental_42', 'fundamental_24', 'fundamental_29', 'fundamental_12', 'fundamental_8', 'fundamental_1', 'fundamental_61', 'fundamental_44', 'fundamental_17', 'technical_6', 'fundamental_14', 'fundamental_38', 'fundamental_47', 'fundamental_39', 'fundamental_13', 'fundamental_31', 'fundamental_33', 'technical_38', 'technical_19', 'technical_12', 'fundamental_27', 'derived_2', 'derived_1', 'fundamental_22', 'fundamental_48', 'derived_4', 'fundamental_46', 'technical_41', 'technical_25', 'fundamental_20', 'fundamental_41', 'fundamental_45', 'fundamental_26', 'fundamental_34', 'technical_1', 'fundamental_7', 'technical_33', 'fundamental_6', 'fundamental_36', 'technical_31', 'fundamental_19', 'technical_18', 'derived_0', 'technical_16']
I_LIST_FULL = [0, 1646, 2374, 3917, 4033, 5846, 7659, 9202, 9420, 10760, 12505, 13284, 13502, 14331, 15977, 17419, 17637, 18569, 20382, 22195, 22354, 23286, 25099, 25317, 25739, 27552, 29365, 31178, 32991, 34804, 36617, 37549, 38991, 40736, 42447, 43842, 45655, 47198, 47518, 47803, 49616, 51429, 51491, 51744, 51962, 53404, 55149, 56962, 58235, 59311, 59478, 61291, 61652, 62277, 64090, 65903, 66835, 68648, 70461, 71799, 73612, 73981, 75016, 75393, 75418, 77231, 78774, 80587, 81009, 82005, 82475, 82651, 82703, 82955, 83054, 84597, 84917, 84966, 86352, 88165, 89692, 91505, 92377, 94190, 94510, 96323, 97847, 98065, 99878, 100376, 100458, 100463, 100499, 100556, 100561, 102374, 102515, 104328, 105770, 105988, 106308, 108121, 109660, 111473, 112915, 113643, 114779, 116592, 118405, 120218, 120385, 121214, 123027, 123384, 123907, 124311, 124410, 125138, 126896, 128709, 128723, 129145, 130958, 132771, 134111, 135452, 136979, 137299, 137619, 139432, 140772, 142585, 144398, 145573, 147386, 149199, 150548, 152361, 154174, 155158, 156971, 158107, 159243, 159379, 161192, 163005, 164818, 166464, 168277, 168495, 170240, 170458, 172271, 174084, 175897, 175916, 176439, 178252, 179135, 180948, 182693, 184506, 186078, 187891, 189566, 191379, 193192, 194735, 196548, 198361, 200174, 201366, 203179, 203601, 205414, 205632, 207445, 209258, 211071, 211235, 212411, 214224, 216037, 217850, 219663, 220429, 221339, 223152, 224897, 225319, 225335, 226675, 227607, 227691, 227848, 229121, 229799, 229982, 231795, 233470, 234413, 234414, 236227, 236547, 236765, 238578, 239547, 239765, 241578, 242483, 242550, 244093, 244616, 244774, 244777, 244779, 244780, 244781, 244794, 246337, 246368, 247300, 248232, 248271, 250084, 251897, 253710, 254438, 254656, 254874, 256417, 258162, 258584, 260329, 262142, 263887, 265023, 266836, 267871, 268577, 270120, 271933, 273746, 275559, 277372, 279185, 279913, 280487, 280930, 281097, 282910, 283704, 284637, 285875, 286093, 287906, 289010, 289168, 290981, 291301, 292897, 293931, 294098, 294903, 295835, 296002, 297815, 299461, 300752, 302565, 304056, 305535, 306834, 308276, 310089, 311902, 312630, 313085, 313405, 314731, 315589, 315909, 316127, 316494, 317172, 318402, 319538, 321283, 321408, 323221, 324153, 324847, 325931, 326607, 327392, 328031, 329473, 331286, 333031, 334844, 335589, 336929, 338742, 338744, 339166, 340979, 341146, 341466, 343279, 345092, 346126, 347871, 348326, 348951, 350764, 352577, 354390, 354424, 355347, 356075, 357820, 358038, 358205, 360018, 361831, 362825, 363145, 363873, 365086, 366767, 368069, 369882, 371695, 372831, 373581, 375394, 377207, 378036, 379849, 381512, 383325, 384285, 384523, 386336, 388149, 389962, 390485, 392298, 394111, 395924, 397737, 398362, 400107, 401920, 403260, 405073, 406886, 407766, 409579, 411392, 413205, 415018, 415338, 417151, 418964, 419031, 419453, 420297, 422110, 423923, 425736, 425750, 427563, 428359, 429330, 429752, 430843, 432159, 433740, 435553, 437366, 439179, 439499, 441312, 442666, 443888, 444348, 444566, 446379, 446801, 447019, 447169, 447336, 448645, 450458, 451213, 453026, 453448, 455261, 457074, 457292, 459105, 460918, 462731, 464476, 466289, 466609, 468422, 469459, 470391, 472136, 473679, 474442, 475172, 476985, 478528, 480341, 480763, 482576, 483035, 483150, 484963, 486506, 487681, 489494, 490864, 492677, 493996, 495809, 497267, 497481, 499294, 500641, 501063, 502876, 503307, 505120, 506933, 508496, 509864, 511407, 511692, 513117, 513742, 515555, 515977, 516759, 518355, 520168, 520488, 520655, 522468, 524281, 526094, 527434, 528400, 528515, 530328, 532141, 532597, 533937, 534266, 536079, 537892, 538652, 538767, 540580, 542393, 543018, 544831, 546644, 548457, 549327, 550973, 552008, 553288, 555101, 556914, 557201, 559014, 559653, 560329, 562142, 563955, 564073, 565685, 567498, 569041, 570854, 572667, 574480, 576126, 577939, 578305, 580118, 581224, 581544, 582272, 584085, 585898, 587407, 588032, 589373, 589488, 591084, 591812, 592540, 592941, 594754, 596567, 596581, 598394, 600207, 600425, 600592, 602405, 603882, 605528, 607341, 609154, 609168, 609691, 610589, 612132, 612435, 613264, 613385, 613518, 614485, 615621, 616832, 618645, 618863, 619183, 620928, 622741, 623469, 625282, 626928, 627255, 627831, 629644, 629896, 631278, 631598, 633411, 633582, 633697, 635510, 636033, 637846, 638080, 638904, 640717, 642530, 642740, 643281, 643703, 645280, 645357, 647170, 648915, 650728, 651353, 652999, 654812, 655319, 656659, 656979, 657299, 657619, 658551, 659279, 661092, 662432, 664245, 666058, 667871, 669684, 669902, 670120, 671933, 673746, 673760, 675573, 675856, 677669, 677887, 679632, 681445, 681884, 682204, 684017, 684132, 685877, 687690, 688010, 689823, 691636, 691650, 691765, 693578, 693693, 693945, 695488, 695566, 697379, 698208, 699802, 700223, 702036, 703849, 705662, 707344, 709157, 710970, 712783, 714596, 716409, 717545, 718494, 720070, 721716, 723529, 723849, 725662, 727475, 728304, 730117, 731930, 733000, 734813, 735745, 737490, 737532, 737632, 739160, 740973, 741853, 743666, 744088, 745224, 746767, 748580, 750393, 752138, 753951, 754373, 755523, 756543, 758356, 758655, 760301, 761844, 762164, 763977, 765790, 767603, 768535, 768855, 769040, 770853, 770865, 771083, 771360, 771612, 772135, 772902, 773834, 774256, 774437, 775166, 776693, 776860, 776975, 778063, 779590, 779757, 779853, 781666, 783209, 784916, 785134, 786677, 786844, 788657, 788788, 790601, 791430, 792259, 792681, 793613, 795426, 795644, 795964, 796743, 798556, 798876, 799196, 799895, 800369, 802182, 803114, 804927, 806740, 807488, 807706, 808716, 810253, 812066, 813609, 815051, 815157, 816970, 818741, 820554, 822299, 822307, 824120, 825865, 826899, 827219, 829032, 830678, 832120, 833933, 835084, 835135, 836948, 837841, 839487, 841300, 843113, 844045, 845079, 845163, 846690, 848042, 849178, 850721, 850735, 852548, 854194, 854412, 854575, 856388, 857116, 858929, 860742, 862555, 862875, 863297, 864687, 865857, 866789, 868602, 868735, 869667, 869987, 871031, 872844, 874657, 876470, 877812, 878132, 879877, 881690, 883503, 884639, 885571, 887384, 888520, 890333, 890543, 891898, 893711, 895051, 895371, 897184, 897244, 898223, 900036, 901579, 902817, 904463, 906109, 907652, 908057, 908275, 910088, 910986, 911306, 911434, 911856, 913601, 915144, 916957, 917455, 917537, 917542, 917578, 917640, 917641, 917645, 917675, 917680, 917690, 917693, 917697, 917699, 917701, 917703, 917721, 917743, 917746, 918408, 919544, 919864, 920031, 921141, 921461, 923274, 923298, 925043, 925728, 926745, 928558, 930371, 930725, 932538, 933674, 934730, 935050, 936863, 938676, 939608, 940948, 941166, 941895, 942658, 944229, 946042, 946233, 947978, 949791, 951604, 953417, 955230, 955232, 956559, 958372, 959915, 961728, 963043, 964856, 965074, 966120, 967933, 968100, 968911, 970724, 972537, 974350, 976163, 977706, 978808, 979008, 980683, 982496, 984309, 984629, 985799, 987612, 987631, 988053, 989866, 991679, 992713, 993542, 995355, 995777, 995795, 996013, 997826, 998554, 999537, 999899, 1001712, 1003457, 1003675, 1005488, 1006216, 1008029, 1008741, 1010554, 1011894, 1013707, 1015520, 1017333, 1019146, 1019874, 1020602, 1022369, 1024182, 1024349, 1026162, 1026291, 1026303, 1027031, 1027661, 1027981, 1029524, 1029538, 1030163, 1030192, 1030614, 1030934, 1031356, 1032084, 1033897, 1035440, 1036474, 1038287, 1040100, 1041440, 1042197, 1043539, 1045352, 1047165, 1047193, 1048125, 1049123, 1049646, 1051459, 1053272, 1053439, 1053657, 1055303, 1055943, 1057080, 1058893, 1060436, 1060959, 1062727, 1064254, 1065999, 1067289, 1067507, 1068132, 1068587, 1068907, 1070720, 1072533, 1074076, 1074396, 1076209, 1076658, 1077998, 1079811, 1080740, 1080909, 1082722, 1083194, 1085007, 1086820, 1088416, 1090229, 1091825, 1093570, 1094706, 1096519, 1098332, 1099270, 1101083, 1102896, 1103216, 1103739, 1104671, 1106484, 1108229, 1110042, 1111855, 1113668, 1115481, 1115596, 1116119, 1116146, 1116563, 1118376, 1118696, 1120456, 1121950, 1123695, 1124945, 1125163, 1126976, 1128789, 1130602, 1131039, 1132852, 1134597, 1135116, 1136929, 1137147, 1137365, 1138875, 1140418, 1141650, 1143463, 1143625, 1145438, 1147251, 1148794, 1149012, 1150825, 1150911, 1151333, 1152555, 1154368, 1155194, 1156636, 1158449, 1158972, 1159021, 1160766, 1162579, 1163919, 1165732, 1166295, 1167533, 1169346, 1170074, 1171887, 1173700, 1174020, 1175833, 1175847, 1176403, 1177946, 1178674, 1180487, 1182300, 1183232, 1183279, 1185092, 1186837, 1188075, 1188803, 1189323, 1190255, 1190370, 1190792, 1192605, 1193230, 1194059, 1195872, 1196738, 1198551, 1199279, 1199709, 1199791, 1199796, 1199832, 1199894, 1199895, 1199899, 1199911, 1199916, 1201729, 1202049, 1203862, 1205675, 1206386, 1208199, 1208272, 1208477, 1208984, 1209304, 1209624, 1211437, 1213250, 1215063, 1216212, 1218025, 1219161, 1219315, 1221128, 1222060, 1223400, 1224025, 1224723, 1225655, 1227468, 1229143, 1230956, 1232769, 1233317, 1234137, 1235882, 1236610, 1236725, 1238538, 1240351, 1241508, 1241828, 1241877, 1243622, 1245435, 1246571, 1248384, 1250197, 1250312, 1251040, 1252853, 1254041, 1255381, 1257194, 1259007, 1260752, 1262565, 1263839, 1263959, 1265772, 1267585, 1269398, 1269643, 1271085, 1272425, 1274238, 1276051, 1276269, 1277609, 1279422, 1279742, 1281555, 1283368, 1285181, 1286994, 1288807, 1290350, 1290824, 1292569, 1294314, 1295942, 1297755, 1299568, 1301214, 1301839, 1303652, 1305465, 1307008, 1308821, 1309839, 1311382, 1312060, 1313502, 1315045, 1316858, 1317076, 1317504, 1317758, 1319098, 1319520, 1319536, 1321281, 1322315, 1324128, 1325671, 1327484, 1328620, 1330433, 1330651, 1332464, 1333263, 1335008, 1335988, 1337801, 1338223, 1338237, 1340050, 1341544, 1343357, 1345170, 1346514, 1347454, 1347862, 1349675, 1350403, 1350570, 1352383, 1354196, 1354618, 1355500, 1356395, 1357887, 1359273, 1360001, 1360423, 1360875, 1362688, 1363824, 1363941, 1365440, 1367253, 1368561, 1370374, 1370801, 1372614, 1374157, 1375970, 1376749, 1378562, 1380375, 1382188, 1382361, 1383140, 1384953, 1386766, 1388579, 1388899, 1389117, 1390930, 1392743, 1394286, 1395320, 1396005, 1396223, 1396883, 1397101, 1398914, 1400659, 1401081, 1402894, 1404569, 1406382, 1407337, 1407351, 1409164, 1410977, 1412520, 1414265, 1416078, 1417621, 1419434, 1421247, 1421465, 1422601, 1424414, 1426159, 1427972, 1429010, 1429784, 1431597, 1431917, 1433730, 1435543, 1437086, 1437300, 1439026, 1439346, 1440889, 1441209, 1443022, 1444835, 1446648, 1448461, 1450145, 1450567, 1452380, 1452700, 1454513, 1454731, 1455888, 1456208, 1456426, 1457969, 1458143, 1459585, 1461398, 1463211, 1464653, 1466466, 1466888, 1468701, 1468919, 1470565, 1471293, 1472836, 1474649, 1474755, 1476568, 1476870, 1478683, 1480428, 1482241, 1482243, 1484056, 1485869, 1487311, 1489124, 1490490, 1492303, 1494116, 1495929, 1496300, 1498113, 1498134, 1499947, 1501760, 1502998, 1504811, 1505700, 1506012, 1507825, 1508757, 1510570, 1511093, 1512906, 1514719, 1516262, 1518075, 1518803, 1520548, 1521782, 1523595, 1524361, 1524884, 1526326, 1527666, 1528465, 1529601, 1529678, 1530231, 1532044, 1533857, 1535670, 1537483, 1539296, 1539803, 1541616, 1543361, 1545174, 1546717, 1547517, 1549330, 1551143, 1552130, 1553943, 1554671, 1556484, 1558297, 1559637, 1561450, 1562075, 1563888, 1565275, 1565325, 1567070, 1568883, 1569662, 1571475, 1573220, 1575033, 1576846, 1577574, 1579319, 1580049, 1581862, 1582507, 1583643, 1584735, 1586381, 1587062, 1588875, 1589821, 1590487, 1591473, 1591793, 1591963, 1593776, 1594401, 1596214, 1597791, 1599604, 1601417, 1603230, 1605043, 1606343, 1608156, 1609969, 1611782, 1612835, 1614648, 1616461, 1616632, 1618100, 1618623, 1620436, 1620450, 1622195, 1624008, 1625656, 1626384, 1628197, 1630010, 1631350, 1633163, 1634605, 1634619, 1635448, 1637261, 1639074, 1640887, 1641819, 1643484, 1645297, 1645549, 1646072, 1647004, 1648817, 1649239, 1651052, 1651372, 1653185, 1653627, 1654559, 1654777, 1656590, 1658403, 1660148, 1661961, 1663504, 1665317, 1667130, 1667181, 1668794, 1670607, 1670970, 1671698, 1672527, 1674272, 1674694, 1675321, 1676449, 1678262, 1680075, 1681820, 1683633, 1684836, 1685796, 1687086, 1688732, 1690545, 1691425, 1692867, 1694680, 1696326, 1698139, 1699952, 1701765, 1703411, 1705156, 1705323, 1707136, 1708793, 1710606]
I_LIST_HALF = [0, 739, 1375, 1491, 2397, 3303, 3939, 4372, 5210, 5949, 6484, 6509, 7415, 8321, 8480, 8505, 9411, 10317, 11223, 12129, 13035, 13941, 14847, 15483, 16018, 16856, 17762, 18501, 19407, 20043, 20949, 21855, 21917, 22170, 22705, 23543, 24449, 25355, 26261, 27167, 27528, 28434, 29340, 29365, 30271, 31177, 32083, 32989, 33014, 33920, 34297, 34322, 35228, 35864, 36770, 37192, 38030, 38206, 38258, 38357, 38993, 39042, 39948, 40854, 41474, 42380, 43252, 44158, 45064, 45970, 46876, 47374, 47456, 47461, 47497, 47554, 47559, 48465, 49371, 49906, 50812, 51718, 52624, 53159, 53388, 54294, 55200, 56106, 57012, 57241, 57645, 57744, 58650, 59556, 60462, 61368, 61801, 62707, 63327, 64233, 64666, 65572, 66478, 67013, 67919, 68825, 69731, 70637, 71543, 72230, 73136, 73365, 73594, 73730, 74636, 75542, 76448, 77187, 78093, 78931, 79837, 80743, 81649, 82555, 83438, 84344, 85182, 86088, 86994, 87900, 88806, 89712, 90618, 91254, 92160, 93066, 93972, 94810, 95716, 96622, 97528, 98434, 99340, 99504, 100245, 101151, 102057, 102963, 103869, 104635, 105473, 106379, 107217, 107650, 107675, 107759, 107916, 108822, 109500, 109683, 110589, 111495, 112401, 113307, 114213, 115119, 116025, 116930, 117566, 117724, 117727, 117729, 117730, 117731, 117744, 118380, 118405, 118430, 119336, 120242, 121148, 121784, 122622, 123460, 124366, 125204, 125433, 126339, 127245, 127951, 128587, 129493, 130399, 131305, 132211, 133117, 133691, 134124, 135030, 135055, 135961, 136292, 137198, 137834, 137992, 138898, 139804, 139931, 140670, 140695, 141601, 142340, 142773, 143679, 144517, 145423, 146261, 146796, 147702, 148608, 149041, 149899, 150266, 150944, 151850, 152079, 152917, 153042, 153948, 153973, 154879, 155664, 156097, 156632, 157538, 158376, 159282, 160027, 160460, 161366, 162272, 163178, 164084, 164211, 165049, 165955, 166861, 167767, 168673, 169511, 170417, 171323, 172062, 172968, 173874, 174780, 175686, 176592, 176821, 177457, 178363, 179269, 180175, 180931, 181837, 182743, 182981, 183887, 184793, 185699, 186605, 187511, 188417, 189323, 190161, 191067, 191500, 192406, 193312, 194218, 195124, 196030, 196936, 197842, 198748, 199592, 200498, 201404, 202310, 203216, 204012, 204918, 205756, 206189, 207095, 208001, 208907, 209813, 210719, 211625, 212531, 212556, 213462, 214368, 215274, 216029, 216935, 217841, 218747, 219653, 220559, 221465, 222303, 223209, 224115, 225021, 225046, 225884, 226520, 227283, 227919, 228825, 229461, 230367, 231273, 231732, 232638, 233274, 233894, 234800, 235706, 236612, 237518, 238424, 238975, 239189, 240095, 241001, 241907, 242338, 243244, 244150, 245056, 245962, 246598, 247116, 248022, 248557, 249463, 250369, 251275, 252181, 253087, 253520, 254358, 255264, 256170, 256626, 257059, 257388, 258294, 259200, 259960, 260866, 261772, 262678, 263584, 264490, 265229, 266135, 267041, 267947, 268853, 269140, 270046, 270275, 271181, 272087, 272112, 272817, 273723, 274359, 275265, 276171, 277077, 277816, 278722, 279088, 279994, 280900, 281806, 282712, 283314, 284220, 285126, 285527, 286433, 287339, 288245, 289151, 290057, 290963, 291702, 292608, 293514, 294412, 295048, 295351, 295472, 295605, 296511, 296740, 297646, 298552, 299390, 300296, 301202, 301941, 302268, 302599, 303505, 304411, 305317, 305488, 306394, 307300, 308124, 309030, 309936, 310146, 310171, 311077, 311154, 312060, 312898, 313804, 314543, 315449, 315882, 315907, 316813, 317246, 318152, 319058, 319964, 320870, 321776, 322682, 323588, 323871, 324777, 325615, 326521, 327427, 328265, 329171, 330077, 330983, 331889, 332525, 332603, 333509, 334415, 334836, 335742, 336648, 337554, 338392, 339298, 340204, 341110, 342016, 342922, 343151, 343193, 344099, 344838, 345744, 346650, 347556, 348462, 349368, 350274, 351180, 351205, 352043, 352143, 353049, 353955, 354861, 355090, 355726, 356632, 357538, 358376, 359282, 360188, 361094, 362000, 362025, 362764, 363400, 364306, 365212, 366118, 366143, 366328, 367234, 367511, 368278, 368303, 368484, 368713, 369333, 370239, 370859, 371765, 372401, 373307, 373943, 374849, 375755, 375780, 376686, 377592, 378228, 378702, 379608, 379633, 380539, 381445, 381470, 382376, 383282, 384188, 384824, 385359, 385465, 386371, 387277, 388183, 389021, 389927, 390765, 390892, 391798, 392537, 393072, 393978, 394884, 394935, 395841, 396734, 397473, 398379, 399285, 399310, 400216, 400300, 400920, 401826, 402055, 402691, 403597, 404336, 404499, 405405, 406311, 407217, 408123, 409029, 409935, 409960, 410866, 410999, 411024, 411930, 412836, 413742, 414648, 415554, 416392, 417298, 418204, 418433, 418458, 419364, 419593, 420499, 420709, 421615, 422521, 422954, 423860, 423920, 424826, 425732, 426368, 427274, 428013, 428752, 429388, 430294, 431192, 432030, 432666, 433572, 434070, 434152, 434157, 434193, 434255, 434256, 434260, 434290, 434295, 434305, 434308, 434312, 434314, 434316, 434318, 434336, 434358, 434361, 434590, 435243, 436149, 436173, 437011, 437631, 438537, 439443, 440349, 441255, 441484, 442390, 443296, 444202, 444227, 444660, 445389, 446152, 447058, 447964, 448155, 448993, 449899, 450805, 451711, 452617, 453523, 454429, 455065, 455971, 456877, 457783, 458689, 459595, 460406, 461312, 462218, 463124, 464030, 464666, 464861, 465767, 466673, 467579, 468485, 469391, 470297, 471203, 471330, 472236, 472254, 473160, 474066, 474428, 475334, 476172, 477078, 477984, 478696, 479602, 480035, 480941, 481847, 482753, 483659, 484565, 485471, 486377, 486506, 486518, 487154, 488060, 488696, 488823, 489729, 490635, 491068, 491807, 492713, 493619, 494525, 494553, 494578, 495484, 496390, 497296, 498035, 498671, 499577, 500483, 501119, 501642, 502503, 503123, 503961, 504867, 505773, 506679, 507315, 508221, 508348, 508781, 509687, 510593, 510762, 511668, 512574, 513480, 514386, 515292, 516198, 517036, 517265, 518171, 519077, 519983, 520889, 521795, 521820, 522726, 523564, 524470, 525376, 526282, 527188, 527215, 527632, 528538, 529444, 530350, 531188, 532094, 533000, 533906, 534812, 535249, 536155, 536993, 537512, 538418, 539324, 539960, 540866, 541772, 541934, 542840, 543746, 544382, 545288, 545374, 546212, 547118, 547944, 548479, 549385, 549434, 550272, 551178, 551611, 552517, 552542, 552873, 553779, 554685, 555591, 556497, 557053, 557689, 558595, 559501, 559526, 560432, 561270, 561601, 562121, 562146, 563052, 563958, 564824, 565730, 566160, 566242, 566247, 566283, 566345, 566346, 566350, 566362, 566367, 567273, 568179, 569085, 569991, 570064, 570970, 571876, 572782, 573688, 574594, 574823, 574977, 575883, 575908, 576341, 576366, 576391, 577297, 578203, 579109, 580015, 580563, 581383, 582221, 583127, 584033, 584939, 584988, 585826, 586732, 586961, 587867, 588773, 589679, 590585, 591018, 591924, 592830, 593668, 594574, 595480, 595505, 596411, 597317, 598223, 598468, 599003, 599436, 600342, 601248, 601681, 602587, 603493, 604399, 605305, 606211, 607117, 607753, 608227, 609065, 609903, 610624, 611530, 612436, 613175, 614081, 614987, 615623, 616529, 617367, 618003, 618681, 619216, 619852, 620758, 621012, 621445, 621461, 622299, 622426, 623332, 623968, 624874, 625103, 626009, 626915, 627348, 628186, 629092, 629998, 630904, 631810, 632716, 633622, 634528, 635434, 636340, 637246, 638152, 639034, 639467, 640052, 640958, 641289, 642195, 642424, 642541, 643447, 644353, 645259, 646165, 646592, 647498, 648134, 649040, 649946, 650852, 651758, 651931, 652837, 653743, 654649, 655555, 656461, 657097, 657224, 657453, 658359, 659197, 660103, 661009, 661915, 662821, 663727, 664633, 665269, 666107, 667013, 667649, 668555, 669461, 669690, 670596, 671434, 672340, 673246, 674152, 675058, 675964, 676870, 677084, 677990, 678626, 679532, 680438, 681344, 682250, 683156, 684062, 684968, 685874, 686510, 686684, 687219, 688125, 689031, 689566, 690472, 691378, 692117, 692753, 693659, 693765, 694671, 695577, 696415, 697321, 698227, 699133, 699668, 700574, 701480, 702386, 703292, 704198, 705104, 705125, 706031, 706937, 707268, 708174, 708607, 709513, 709538, 710444, 711350, 712256, 712892, 713798, 714636, 715474, 716380, 716813, 717719, 718152, 718788, 719017, 719094, 719103, 720009, 720915, 721821, 722727, 723633, 724539, 725377, 726283, 726919, 727555, 728461, 729367, 730106, 731012, 731918, 732824, 733257, 734163, 735069, 735975, 736025, 736863, 737769, 738675, 739513, 740419, 741325, 742163, 742596, 743502, 744147, 744376, 745282, 746021, 746702, 747608, 748244, 748677, 749583, 749753, 750659, 751565, 752403, 753309, 754215, 755121, 756027, 756865, 757771, 758677, 759583, 760489, 761395, 762301, 763207, 764113, 764951, 765857, 766763, 767669, 768575, 769008, 769914, 770449, 771355, 772261, 773167, 773192, 774030, 774936, 775774, 776680, 777586, 778492, 778934, 778959, 779865, 780771, 781609, 782515, 783151, 784057, 784963, 785014, 785920, 786826, 787189, 788027, 788654, 789560, 790466, 791372, 792210, 793116, 794022, 794455, 795361, 796100, 797006, 797541, 798447, 799186, 800092, 800998, 801904, 802643, 803481, 803648, 804554, 805392]

# I_LIST contains the positions where new assets are introduced. It is pre-calculated.
if SUBMIT:
    I_LIST = I_LIST_FULL
else:
    I_LIST = I_LIST_HALF


def created_lagged_dataset(dataset,features_to_lag = FEATURES_TO_LAG, num_lags=NUM_LAGS):
    # create lag features from dataset
    if not SUBMIT:
        assert dataset.isnull().sum().sum() == 0,'fillna before create lagged dataset!'
    dataset = dataset.sort_values(['id','timestamp'])
    for feature in features_to_lag:
        for i in range(num_lags):
            temp_feature_shifti = dataset[feature].shift(i+1)
            temp_set_null = [b+k for b in I_LIST for k in range(i+1)]
            temp_feature_shifti.iloc[temp_set_null] = np.nan
            dataset[feature+'_-'+str(i+1)] = temp_feature_shifti
    dataset = dataset.fillna(method='bfill')
    dataset = dataset.sort_index()
    return dataset

def add_missing_features(dataset,features):
    # create missing features from dataset
    if not SUBMIT:
        assert dataset.isnull().sum().sum() > 0,'fillna after adding missing features!'
    dataset = dataset.copy()
    missing_features = [feature + '_nan_' for feature in features]+['num_missing']
    dataset['num_missing'] = dataset.isnull().sum(axis=1)
    for feature in features:
        dataset[feature + '_nan_'] = pd.isnull(dataset[feature])
    return dataset,missing_features


env = kagglegym.make()
o = env.reset()
mid_values = o.train.median(axis=0)
col = [c for c in o.train.columns if c not in ['id','y','timestamp']]

miss_features_to_add = MIS[:MIS_TOPN]
unv_selected_features = UNV[:UNV_TOPN]
features_to_lag_for_rf = ['technical_21', 'technical_30', 'fundamental_51', 'fundamental_2', 'technical_20',
                          'technical_41', 'technical_33', 'technical_13','technical_40','technical_7']

#====initial feature engineering=====
print ('Adding missing features...')
train,missing_features = add_missing_features(o.train,miss_features_to_add)
train = train.fillna(mid_values)
print ('Adding lagged features...')
train = created_lagged_dataset(train,features_to_lag=features_to_lag_for_rf)
train['d_t40'] = (train['technical_40'] - train['technical_40_-1']).apply(np.sign)
train['d_t7'] = (train['technical_7'] - train['technical_7_-1']).apply(np.sign)

lagged_features_rf = [f+'_-'+str(i+1) for i in range(NUM_LAGS) for f in features_to_lag_for_rf]
rf_features = unv_selected_features+missing_features+lagged_features_rf
rf_features = [f for f in rf_features if f not in ['technical_34_nan_', 'technical_22_nan_']]
lm_features = FEATURES_TO_LAG

#===training linear model====
train_cut = ((train.y <= HIGH_Y_CUT)&(train.y >= LOW_Y_CUT))
print("Training Linear Model...")
lm = LinearRegression().fit(train.loc[train_cut, lm_features], train.loc[train_cut, 'y'])

#===cut the training data into 9 parts according to the values of technical 13, technical 20 and technical 30====
cut1 = (train['technical_20'] != 0) & (train['technical_20_-1'] != 0)
cut2 = (train['technical_20'] != 0) & (train['technical_30_-1'] != 0)
cut3 = (train['technical_20'] != 0) & (train['technical_13_-1'] != 0)
cut4 = (train['technical_30'] != 0) & (train['technical_20_-1'] != 0)
cut5 = (train['technical_30'] != 0) & (train['technical_30_-1'] != 0)
cut6 = (train['technical_30'] != 0) & (train['technical_13_-1'] != 0)
cut7 = (train['technical_13'] != 0) & (train['technical_20_-1'] != 0)
cut8 = (train['technical_13'] != 0) & (train['technical_30_-1'] != 0)
cut9 = (train['technical_13'] != 0) & (train['technical_13_-1'] != 0)

#====create a new feature with technical 13, technical 20 and technical 30. paremeters are pre-trained using a linear model====
train['ft_1'] = 0.
train.loc[cut1,'ft_1'] = np.dot(train.loc[cut1,['technical_20','technical_20_-1']].values,np.array([-0.51326931, 0.40828887]).reshape(-1,1))
train.loc[cut2,'ft_1'] = np.dot(train.loc[cut2,['technical_20','technical_30_-1']].values,np.array([-0.20293476, -0.076136112]).reshape(-1,1))
train.loc[cut3,'ft_1'] = np.dot(train.loc[cut3,['technical_20','technical_13_-1']].values,np.array([-0.22986352, 0.10932801]).reshape(-1,1))
train.loc[cut4,'ft_1'] = np.dot(train.loc[cut4,['technical_30','technical_20_-1']].values,np.array([0.042846188, 0.044495553]).reshape(-1,1))
train.loc[cut5,'ft_1'] = np.dot(train.loc[cut5,['technical_30','technical_30_-1']].values,np.array([0.1855558, -0.18703063]).reshape(-1,1))
train.loc[cut6,'ft_1'] = np.dot(train.loc[cut6,['technical_30','technical_13_-1']].values,np.array([-0.017285125, 0.68612349]).reshape(-1,1))
train.loc[cut7,'ft_1'] = np.dot(train.loc[cut7,['technical_13','technical_20_-1']].values,np.array([0.016897909, 0.20263499]).reshape(-1,1))
train.loc[cut8,'ft_1'] = np.dot(train.loc[cut8,['technical_13','technical_30_-1']].values,np.array([-0.014188944, -0.07473655]).reshape(-1,1))
train.loc[cut9,'ft_1'] = np.dot(train.loc[cut9,['technical_13','technical_13_-1']].values,np.array([-0.3154268, 0.41384783]).reshape(-1,1))

#====create a new feature with technical 13, technical 20 and technical 30. paremeters are pre-trained using a linear model====
train['ft_2'] = 0.
train.loc[cut1,'ft_2'] = np.dot(train.loc[cut1,['technical_20','technical_20_-1']].values,np.array([11.425052, -10.548428]).reshape(-1,1))
train.loc[cut2,'ft_2'] = np.dot(train.loc[cut2,['technical_20','technical_30_-1']].values,np.array([6.5392709, 4.1516943]).reshape(-1,1))
train.loc[cut3,'ft_2'] = np.dot(train.loc[cut3,['technical_20','technical_13_-1']].values,np.array([9.2312117, -4.8010755]).reshape(-1,1))
train.loc[cut4,'ft_2'] = np.dot(train.loc[cut4,['technical_30','technical_20_-1']].values,np.array([-2.7867613, -9.1835747]).reshape(-1,1))
train.loc[cut5,'ft_2'] = np.dot(train.loc[cut5,['technical_30','technical_30_-1']].values,np.array([-11.238072, 10.327814]).reshape(-1,1))
train.loc[cut6,'ft_2'] = np.dot(train.loc[cut6,['technical_30','technical_13_-1']].values,np.array([-8.1989126, -1.8637307]).reshape(-1,1))
train.loc[cut7,'ft_2'] = np.dot(train.loc[cut7,['technical_13','technical_20_-1']].values,np.array([7.7772636, -9.519022]).reshape(-1,1))
train.loc[cut8,'ft_2'] = np.dot(train.loc[cut8,['technical_13','technical_30_-1']].values,np.array([1.3770417, 7.4453406]).reshape(-1,1))
train.loc[cut9,'ft_2'] = np.dot(train.loc[cut9,['technical_13','technical_13_-1']].values,np.array([5.5849185, -5.3105154]).reshape(-1,1))

#===select features for lagged linear model and random forest model===
lm_features_lag = ['ft_1','ft_2','technical_40','technical_22','technical_7','technical_20','technical_20_-1']
rf_features += ['d_t40','d_t7','ft_1','ft_2']

#===training lagged linear model====
lm_lag = LinearRegression().fit(train.loc[train_cut, lm_features_lag], train.loc[train_cut, 'y'])

if not SUBMIT:
    print ('Random forest has {0} features; linear model has {1} features'.format(len(rf_features),len(lm_features_lag)))
    print ('{} cells is NA'.format(train.isnull().sum().sum()))
    assert len(rf_features) == len(set(rf_features))

#===training random forest model====
print("Training Random forest Model...")
rfrm = ExtraTreesRegressor(n_estimators=N_EST, max_depth=MAX_DEPTH, n_jobs=-1, random_state=308537,
                           verbose=0,min_samples_leaf=0.0002).fit(train[rf_features], train['y'])
train = []

#===predict====
print("Predicting...")
t = 0; reward_=[]
lag_list = []
while True:
    if not SUBMIT:
        assert len(lag_list) <= NUM_LAGS, 'len lag list > NUM_LAGS'
    test = o.features
    test_missing = add_missing_features(o.features,miss_features_to_add)[0]
    test_missing = test_missing.drop(col+['timestamp'],axis=1)# only id and missing features left
    test = test.fillna(mid_values)
    pred = o.target
    if len(lag_list) < NUM_LAGS:
        lag_list.append(test[['id']+features_to_lag_for_rf])
        pred['y'] = lm.predict(test[lm_features]).clip(LOW_Y_CUT, HIGH_Y_CUT)
    else:
        lag_list.append(test[['id']+features_to_lag_for_rf])
        test_lag = test
        for i in range(NUM_LAGS):
            test_lag = test_lag.merge(lag_list[-(i+2)],how='left',on='id',suffixes=('', '_-'+str(i+1)))
        lag_list.pop(0)
        if test_lag[lagged_features_rf].isnull().sum().sum() > 0:
            test_lag = test_lag.sort_index(axis=1).fillna(method='ffill',axis=1)
        test_lag = test_lag.merge(test_missing,how='left',on='id')
        
        test_lag['d_t40'] = (test_lag['technical_40'] - test_lag['technical_40_-1']).apply(np.sign)
        test_lag['d_t7'] = (test_lag['technical_7'] - test_lag['technical_7_-1']).apply(np.sign)
        
        #===
        cut1 = (test_lag['technical_20'] != 0) & (test_lag['technical_20_-1'] != 0)
        cut2 = (test_lag['technical_20'] != 0) & (test_lag['technical_30_-1'] != 0)
        cut3 = (test_lag['technical_20'] != 0) & (test_lag['technical_13_-1'] != 0)
        cut4 = (test_lag['technical_30'] != 0) & (test_lag['technical_20_-1'] != 0)
        cut5 = (test_lag['technical_30'] != 0) & (test_lag['technical_30_-1'] != 0)
        cut6 = (test_lag['technical_30'] != 0) & (test_lag['technical_13_-1'] != 0)
        cut7 = (test_lag['technical_13'] != 0) & (test_lag['technical_20_-1'] != 0)
        cut8 = (test_lag['technical_13'] != 0) & (test_lag['technical_30_-1'] != 0)
        cut9 = (test_lag['technical_13'] != 0) & (test_lag['technical_13_-1'] != 0)
        #====
        test_lag['ft_1'] = 0.
        test_lag.loc[cut1,'ft_1'] = np.dot(test_lag.loc[cut1,['technical_20','technical_20_-1']].values,np.array([-0.51326931, 0.40828887]).reshape(-1,1))
        test_lag.loc[cut2,'ft_1'] = np.dot(test_lag.loc[cut2,['technical_20','technical_30_-1']].values,np.array([-0.20293476, -0.076136112]).reshape(-1,1))
        test_lag.loc[cut3,'ft_1'] = np.dot(test_lag.loc[cut3,['technical_20','technical_13_-1']].values,np.array([-0.22986352, 0.10932801]).reshape(-1,1))
        test_lag.loc[cut4,'ft_1'] = np.dot(test_lag.loc[cut4,['technical_30','technical_20_-1']].values,np.array([0.042846188, 0.044495553]).reshape(-1,1))
        test_lag.loc[cut5,'ft_1'] = np.dot(test_lag.loc[cut5,['technical_30','technical_30_-1']].values,np.array([0.1855558, -0.18703063]).reshape(-1,1))
        test_lag.loc[cut6,'ft_1'] = np.dot(test_lag.loc[cut6,['technical_30','technical_13_-1']].values,np.array([-0.017285125, 0.68612349]).reshape(-1,1))
        test_lag.loc[cut7,'ft_1'] = np.dot(test_lag.loc[cut7,['technical_13','technical_20_-1']].values,np.array([0.016897909, 0.20263499]).reshape(-1,1))
        test_lag.loc[cut8,'ft_1'] = np.dot(test_lag.loc[cut8,['technical_13','technical_30_-1']].values,np.array([-0.014188944, -0.07473655]).reshape(-1,1))
        test_lag.loc[cut9,'ft_1'] = np.dot(test_lag.loc[cut9,['technical_13','technical_13_-1']].values,np.array([-0.3154268, 0.41384783]).reshape(-1,1))
        #=====
        test_lag['ft_2'] = 0.
        test_lag.loc[cut1,'ft_2'] = np.dot(test_lag.loc[cut1,['technical_20','technical_20_-1']].values,np.array([11.425052, -10.548428]).reshape(-1,1))
        test_lag.loc[cut2,'ft_2'] = np.dot(test_lag.loc[cut2,['technical_20','technical_30_-1']].values,np.array([6.5392709, 4.1516943]).reshape(-1,1))
        test_lag.loc[cut3,'ft_2'] = np.dot(test_lag.loc[cut3,['technical_20','technical_13_-1']].values,np.array([9.2312117, -4.8010755]).reshape(-1,1))
        test_lag.loc[cut4,'ft_2'] = np.dot(test_lag.loc[cut4,['technical_30','technical_20_-1']].values,np.array([-2.7867613, -9.1835747]).reshape(-1,1))
        test_lag.loc[cut5,'ft_2'] = np.dot(test_lag.loc[cut5,['technical_30','technical_30_-1']].values,np.array([-11.238072, 10.327814]).reshape(-1,1))
        test_lag.loc[cut6,'ft_2'] = np.dot(test_lag.loc[cut6,['technical_30','technical_13_-1']].values,np.array([-8.1989126, -1.8637307]).reshape(-1,1))
        test_lag.loc[cut7,'ft_2'] = np.dot(test_lag.loc[cut7,['technical_13','technical_20_-1']].values,np.array([7.7772636, -9.519022]).reshape(-1,1))
        test_lag.loc[cut8,'ft_2'] = np.dot(test_lag.loc[cut8,['technical_13','technical_30_-1']].values,np.array([1.3770417, 7.4453406]).reshape(-1,1))
        test_lag.loc[cut9,'ft_2'] = np.dot(test_lag.loc[cut9,['technical_13','technical_13_-1']].values,np.array([5.5849185, -5.3105154]).reshape(-1,1))

        #===
        
        pred_lm = lm_lag.predict(test_lag[lm_features_lag]).clip(LOW_Y_CUT, HIGH_Y_CUT)
        pred_rf = rfrm.predict(test_lag[rf_features])
        pred['y'] = RF_WEIGHT * pred_rf + (1-RF_WEIGHT) * pred_lm
    o, reward, done, info = env.step(pred[['id','y']])
    reward_.append(reward)
    if t % 100 == 0:
        print(reward, np.mean(np.array(reward_)))
    t += 1
    if done:
        print("public score:", info["public_score"])
        break